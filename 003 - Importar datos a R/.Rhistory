View(AAPL)
check <- rollapply(AAPL$adjusted,
width = 100,
FUN = mean)
View(AAPL)
# AAPL ----
AAPL <- tq_get("AAPL")
View(AAPL)
stocks <- c("AAPL", "MSFT", "AMZN", "FB", "GOOG",
"JNJ", "BRK.B", "PG", "V", "TSLA")
data <- tq_get(stocks)
graphs <- list()
for(i in stocks){
print(i)
stock <- data %>%
filter(symbol == i)
stock$mean50 <- rollmean(stock$close, k = 50, fill = NA, align = "right")
stock$mean15 <- rollmean(stock$close, k = 15, fill = NA, align = "right")
sub <- tail(stock, n = 150)
xmin <- min(sub$date)
xmax <- max(sub$date)
ymin <- min(sub$low)
ymax <- max(sub$high)
sub2 <- tail(stock, n = 30)
xmin2 <- min(sub2$date)
xmax2 <- max(sub2$date)
ymin2 <- min(sub2$low)
ymax2 <- max(sub2$high)
# OHLC
stock_ohlc <- stock %>%
plot_ly(x = ~date,
type = "candlestick",
open = ~open,
high = ~high,
low = ~low,
close = ~close)
stock_ohlc <- stock_ohlc %>%
layout(title = "OHLC",
xaxis = list(range = c(xmin2, xmax2+1)),
yaxis = list(range = c(ymin2, ymax2)))
# Means
stock_means <- stock %>%
plot_ly(x = ~date,
y = ~close,
name = "Close",
type = "scatter",
mode = "lines")
stock_means <- stock_means %>%
add_trace(y = ~mean50,
name = "Mean50",
mode = "lines")
stock_means <- stock_means %>%
add_trace(y = ~mean15,
name = "Mean15",
mode = "lines")
stock_means <- stock_means %>%
layout(title = "Means",
xaxis = list(range = c(xmin, xmax)),
yaxis = list(range = c(ymin, ymax)))
plots <- list(stock_ohlc = stock_ohlc,
stock_means = stock_means)
graphs <- append(graphs, list(plots))
}
## ui.R ##
library(shiny)
library(shinydashboard)
library(plotly)
library(tidyverse)
library(tidyquant)
stocks <- c("AAPL", "MSFT", "AMZN", "FB", "GOOG",
"JNJ", "BRK.B", "PG", "V", "TSLA")
data <- tq_get(stocks)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
database <- readRDS("Proconsumidor_DB.RData")
install.packages(“Rnightlights”)
install.packages("Rnightlights")
library(class)
data("iris")
head(iris)
data("iris")
force(iris)
?iris
# ---- Estructura ----
head(iris)
head(iris, n = 10)
tail(iris)
tail(iris, n = 10)
str(iris)
table(iris$Species)
# Media
mean(iris$Sepal.Length)
mean(iris$Petal.Width)
# Moda
mode(iris$Sepal.Length)
mode(iris$Petal.Width)
?mode
# Mediana
median(iris$Sepal.Length)
median(iris$Petal.Width)
# Mode
DescTools::mode(iris$Sepal.Length)
install.packages("DescTools")
# Mode
DescTools::mode(iris$Sepal.Length)
# Mode
DescTools::Mode(iris$Sepal.Length)
DescTools::Mode(iris$Petal.Width)
# Posicion
quantile(iris$Sepal.Length)
quantile(iris$Petal.Width, prob=c(0.20,0.80)
quantile(iris$Petal.Width, prob=c(0.20,0.80))
# Summary
summary(iris)
attach(iris)
# Varianza
var(Sepal.Length)
var(Petal.Length)
# Desviación Estandard
sd(Sepal.Length)
sd(Petal.Length)
# Rango
max(Sepal.Length) - min(Sepal.Length)
# ---- Medidas de Dispersión ----
sd(Sepal.Length)/mean(Sepal.Length)
library(moments)
# Asimetria
moment::skewness(Sepal.Length)
# Asimetria
moments::skewness(Sepal.Length)
# Kurtosis
moments::kurtosis(Sepal.Length)
# Gráfico de Dispersión
plot(x = Sepal.Length,
y = Petal.Length)
# Gráfico de Dispersión
plot(x = Sepal.Length,
y = Sepal.Width)
# Gráfico de Dispersión
plot(x = Sepal.Length,
y = Sepal.Width,
col = Species)
abline(lm(Sepal.Width ~ Sepal.Length))
# Boxplot
boxplot(Sepal.Length ~ Species)
# Matriz Varianza-Covarianza
cov(Sepal.Length, Petal.Length)
# Matriz Varianza-Covarianza
cov(iris[,-5])
# Correlaciones
cor(iris[,-5])
source('~/.active-rstudio-document', echo=TRUE)
install.packages("DescTools")
install.packages("moments")
install.packages("tidyverse")
install.packages("wooldridge")
library(tidyverse)
library(wooldridge)
# --- 4.1 Data ----
data("mtcars")
?mtcars
str(mtcars)
ggplot(data = mtcars)
ggplot(data = mtcars) +
geom_point(aes(x = mpg, y = wt))
ggplot(data = mtcars) +
geom_point(aes(x = mpg, y = wt, color = class))
# --- 4.1 Data ----
data("mpg")
?mpg
str(mpg)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy,
color = class))
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy,
color = class)) +
geom_smooth(aes(x = displ,
y = hwy,
color = class))
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy,
color = class)) +
geom_smooth(aes(x = displ,
y = hwy,
color = class),
method = "ls")
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy,
color = class)) +
geom_smooth(aes(x = displ,
y = hwy,
color = class),
method = "lm")
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(drv ~ cyl)
# ---- 4.2 Facets ----
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(~ cyl)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(~ class)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy,
color = class))
?mpg
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy,
color = cly))
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy,
color = cyl))
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy,
color = trans))
str(mpg)
summary(mpg)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy,
color = drv))
# ---- 4.2 Facets ----
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(~ drv)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(fl ~ drv)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(class ~ drv)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(class ~)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(~class)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(~class, nrow = 2)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_wrap(~ class, nrow = 2)
# Dos variables
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(class ~ drv)
# Dos variables
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_wrap(class ~ drv)
# Dos variables
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_wrap(class ~ drv)
# ---- 4.2 Facets ----
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_wrap(~ drv)
# Too many categories
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_wrap(~class)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_wrap(~ class, nrow = 2)
# ---- 4.2 Facets ----
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_wrap(~ drv)
# Dos variables
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(class ~ drv)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(.~cyl)
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(~cyl)
# Dos variables = matriz
ggplot(data = mpg) +
geom_point(aes(x = displ,
y = hwy)) +
facet_grid(class ~ drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
library(devtools)
devtools::install_github("NoahZinsmeister/Rbnb")
library(Rbnb)
location = "10019"
?Rbnb
content = Rbnb::searchLocation(location, verbose=FALSE)
?searchLocation
devtools::install_github("airbnb/Rbnb")
library(stringr)
library(purrr)
library(rvest)
BuildSearchURL <- function(page_number, city, country) {
# Constructs a URL to an AirBnB search page
base <- "https://www.airbnb.com/s/"
place <- str_c(city, country, sep = "--")
page_number <- str_c("?page=", page_number)
str_c(base, place, page_number)
}
BuildRoomURL <- function(page) {
# Given a room id, constructs a URL to an AirBnB room URL
base <- "https://www.airbnb.com"
room_id <- page %>%
html_nodes(xpath = '//a[@class="media-photo media-cover"]') %>%
html_attr("href") %>%
str_replace("\\?(guests=?[0-9]{0,2})?&?s=.*$", "")
str_c(base, room_id)
}
GetInfo <- function(room) {
# Scrapes data off a given room page
read_html(room) %>%
html_nodes(xpath = '//div[@class="col-md-6"]') %>%
html_children %>%
html_text %>%
str_subset(":")
}
ParseToDF <- function(info) {
# Converts raw scrape to a data frame
info %>%
map(str_split, ": ") %>%
at_depth(2, ~set_names(.[2], .[1])) %>%
map_df(flatten)
}
Slowly <- function(time, f) {
# Function operator that slows down an existing function
Sys.sleep(time)
force(f)
function(...) f(...)
}
ScrapeCityAtPage <- function(page, city, country, delay = 2) {
# Scrapes a given page of a city search
BuildSearchURL(page, city, country) %>%
read_html %>%
BuildRoomURL %>%
map(Slowly(delay, GetInfo)) %>%
ParseToDF
}
ScrapeCityToPage <- function(max_page, ...) {
# Scrapes up to a page of a city search
# Arguments:
#   max_page - integer, last page number to scrape
#   city - character vector of length 1, city to get information on
#   country - character vector of legnth 1, country of city
#   delay - numeric, number of seconds to delay by between each query
# Returns:
#   data frame containing information on room pages
map_df(1:max_page, ScrapeCityAtPage, ...)
}
ScrapeCityToPage(2, "Tokyo", "Japan")
?at_depth
?map_depth
ParseToDF <- function(info) {
# Converts raw scrape to a data frame
info %>%
map(str_split, ": ") %>%
map_depth(2, ~set_names(.[2], .[1])) %>%
map_df(flatten)
}
ScrapeCityToPage <- function(max_page, ...) {
# Scrapes up to a page of a city search
# Arguments:
#   max_page - integer, last page number to scrape
#   city - character vector of length 1, city to get information on
#   country - character vector of legnth 1, country of city
#   delay - numeric, number of seconds to delay by between each query
# Returns:
#   data frame containing information on room pages
map_df(1:max_page, ScrapeCityAtPage, ...)
}
ScrapeCityToPage(2, "Tokyo", "Japan")
ScrapeCityToPage(3, "Paris", "France")
ScrapeCityToPage(2, "Paris", "France")
BuildSearchURL(2, "Paris", "France")
url <- BuildSearchURL(2, "Paris", "France")
test <- BuildRoomURL(url)
install.packages(c("COVID19", "shiny"))
install.packages(c("DT", "flextable"))
install.packages(c("tidyverse", "XML", "zoo"))
install.packages(c("kableExtra", "knitr", "leaflet", "plotly", "quantmod", "rmarkdown", "stopwords", "tidyquant", "tidytext"))
install.packages(c("backports", "bcdata", "bitops", "boot", "brio", "caTools", "class", "cleangeo", "cli", "cluster"))
install.packages(c("codetools", "covr", "crosstalk", "DBI", "deldir", "desc", "DescTools", "devtools", "diffobj", "dotCall64"))
install.packages(c("e1071", "fastmap", "ffbase", "forecast", "foreign", "future.apply", "gdtools", "gert", "ggridges", "gh"))
install.packages(c("git2r", "gitcreds", "haven", "hexbin", "highr", "httpuv", "hunspell", "ipred", "ISOcodes", "KernSmooth"))
install.packages(c("later", "lava", "leafpop", "lmtest", "lwgeom", "magick", "maptools", "MASS", "Matrix", "mgcv"))
install.packages(c("nlme", "NLP", "nnet", "odbc", "packrat", "padr", "parallelly", "pool", "promises", "ps"))
install.packages(c("rappdirs", "RcppArmadillo", "RCurl", "recipes", "rgdal", "riingo", "RPostgres", "rsample", "rsconnect", "RSQLite"))
install.packages(c("seasonal", "sf", "shape", "slam", "slider", "spam", "spatial", "spatstat", "spatstat.data", "spatstat.utils"))
install.packages(c("SQUAREM", "stars", "survival", "svglite", "systemfonts", "tau", "textcat", "tinytex", "tmap", "tmaptools"))
install.packages(c("tseries", "TTR", "tweenr", "units", "viridis", "viridisLite", "waiter", "warp", "wbstats"))
install.packages(c("withr", "wk", "x13binary", "xgboost"))
install.packages("survival")
find.package('tidyverse')
packageVersion('rvest')
# ---- Data ----
url_tc <- paste0("https://cdn.bancentral.gov.do/documents/entorno-internacional/",
"documents/Materias_Primas",
".pdf?v=1624461145004")
path_tc <- tempfile(pattern = "", fileext = ".pdf")
download.file(url_tc, path_tc, mode = "wb", quiet = TRUE)
test <- extract_tables(path_tc,
page = c(2,2),
area = list(c(65,4,108,270),
c(70,275,108,526)),
guess = FALSE,
output = 'data.frame')
# ---- Paquetes ----
library(tidyverse)
library(rvest)
library(httr)
library(bcdata)
library(tabulizer)
# ---- Data ----
url_tc <- paste0("https://cdn.bancentral.gov.do/documents/entorno-internacional/",
"documents/Materias_Primas",
".pdf?v=1624461145004")
path_tc <- tempfile(pattern = "", fileext = ".pdf")
download.file(url_tc, path_tc, mode = "wb", quiet = TRUE)
locate_areas(path_tc,pages = 2)
test <- extract_tables(path_tc,
page = c(2,2,2),
area = list(c(65,4,108,270),
c(70,275,108,526),
c(269,7,307,264)),
guess = FALSE,
output = 'data.frame')
View(test)
View(test)
test[[3]]
test <- extract_tables(path_tc,
page = c(2,2,2),
area = list(c(65,4,108,270),
c(70,275,108,526),
c(269,7,307,264)),
guess = FALSE,
output = 'data.frame')
locate_areas(path_tc,pages = 2)
locate_areas(path_tc,pages = 2)
test <- extract_tables(path_tc,
page = c(2,2,2, 2),
area = list(c(65,4,108,270),
c(70,275,108,526),
c(269,7,307,264),
c(269,275,307,531)),
guess = FALSE,
output = 'data.frame')
View(test)
test[[4]]
install.packages('learnr')
library(learnr)
setwd("~/Documents/GitHub/aveRage_Juan/002 - Importar datos a R")
data(cars)
data(mtcars)
summary(cars)
write.csv(cars, "cars.csv")
library(readxl)
install.packages("xlsx")
library(xlsx)
write.xlsx(cars, "cars.xlsx")
write.table(mtcars, file = "mtcars.txt", sep = "\t",
row.names = FALSE)
write.table(cars, file = "cars.txt", sep = "\t",
row.names = FALSE)
write.csv(mtcars, "mtcars.csv")
write.table(mtcars, file = "mtcars.txt", sep = "\t",
row.names = FALSE)
View(mtcars)
?read.csv
?read_excel
